name: ${COMPOSE_NAME}

volumes:
  produccion_javadata:
  perfil_uploads:

# Definimos los servicios que se ejecutar√°n en los contenedores Docker.
services:
  java:
    image: ${PROJECT_NAME}:${VERSION:-latest}
    ports:
      - "${PUERTO_PRODUCCION:-8080}:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/producciondb
      SPRING_DATASOURCE_USERNAME: produccionuser
      SPRING_DATASOURCE_PASSWORD: produccionpassword
      SPRING_PROFILES_ACTIVE: produccion
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:${PUERTO_PRODUCCION}/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: always
    volumes:
      - produccion_javadata:/var/lib/data/
      - perfil_uploads:/var/lib/data/uploads

  db:
    image: postgres:latest
    environment:
      POSTGRES_DB: 'producciondb'
      POSTGRES_USER: 'produccionuser'
      POSTGRES_PASSWORD: 'produccionpassword'
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "produccionuser" ]
      timeout: 20s
      retries: 10
    restart: always
    volumes:
      - produccion_pgdata:/var/lib/postgresql/data/
