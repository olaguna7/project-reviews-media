name: ${COMPOSE_NAME}

# Definimos los servicios que se ejecutarÃ¡n en los contenedores Docker.
services:
  java:
    image: ${PROJECT_NAME}:${VERSION:-latest}
    ports:
      - "${PUERTO_PRODUCCION:-8080}:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/producciondb
      SPRING_DATASOURCE_USERNAME: produccionuser
      SPRING_DATASOURCE_PASSWORD: produccionpassword
      SPRING_PROFILES_ACTIVE: produccion
      APP_UPLOAD_DIR: /tmp/uploads
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:${PUERTO_PRODUCCION}/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: always
    volumes:
      - ./uploads:/tmp/uploads  # Mapeo directo para ver archivos en host
    user: root
    command: >
      sh -c "
      mkdir -p $${APP_UPLOAD_DIR} &&
      chmod -R 777 $${APP_UPLOAD_DIR} &&
      chown -R 1000:1000 $${APP_UPLOAD_DIR} &&
      su -c 'java -jar /app.jar' -s /bin/sh 1000
      "

  db:
    image: postgres:latest
    environment:
      POSTGRES_DB: 'producciondb'
      POSTGRES_USER: 'produccionuser'
      POSTGRES_PASSWORD: 'produccionpassword'
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "produccionuser" ]
      timeout: 20s
      retries: 10
    restart: always
